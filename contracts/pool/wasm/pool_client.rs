// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct PoolFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}

impl<R> PoolFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}

impl<R: Remoting + Clone> traits::PoolFactory for PoolFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, pool_factory::io::New>::new(self.remoting.clone(), ())
    }
    fn new_with_data(
        &self,
        name: String,
        type_pool: String,
        distribution_mode: String,
        access_type: String,
        participants: Vec<ActorId>,
        vft_contract_id: Option<ActorId>,
        admins: Vec<ActorId>,
        last_distribution_time: u64,
        is_manual: bool,
    ) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, pool_factory::io::NewWithData>::new(
            self.remoting.clone(),
            (
                name,
                type_pool,
                distribution_mode,
                access_type,
                participants,
                vft_contract_id,
                admins,
                last_distribution_time,
                is_manual,
            ),
        )
    }
}

pub mod pool_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());

        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }

        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
        pub struct NewWithData(());

        impl NewWithData {
            #[allow(dead_code)]
            pub fn encode_call(
                name: String,
                type_pool: String,
                distribution_mode: String,
                access_type: String,
                participants: Vec<ActorId>,
                vft_contract_id: Option<ActorId>,
                admins: Vec<ActorId>,
                last_distribution_time: u64,
                is_manual: bool,
            ) -> Vec<u8> {
                <NewWithData as ActionIo>::encode_call(&(
                    name,
                    type_pool,
                    distribution_mode,
                    access_type,
                    participants,
                    vft_contract_id,
                    admins,
                    last_distribution_time,
                    is_manual,
                ))
            }
        }

        impl ActionIo for NewWithData {
            const ROUTE: &'static [u8] = &[44, 78, 101, 119, 87, 105, 116, 104, 68, 97, 116, 97];
            type Params = (
                String,
                String,
                String,
                String,
                Vec<ActorId>,
                Option<ActorId>,
                Vec<ActorId>,
                u64,
                bool,
            );
            type Reply = ();
        }
    }
}
pub struct VftManager<R> {
    remoting: R,
}

impl<R> VftManager<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}

impl<R: Remoting + Clone> traits::VftManager for VftManager<R> {
    type Args = R::Args;
    fn add_admin(
        &mut self,
        new_admin_address: ActorId,
    ) -> impl Call<Output = VftManagerEvents, Args = R::Args> {
        RemotingAction::<_, vft_manager::io::AddAdmin>::new(
            self.remoting.clone(),
            new_admin_address,
        )
    }
    fn add_participant(
        &mut self,
        participant: ActorId,
    ) -> impl Call<Output = VftManagerEvents, Args = R::Args> {
        RemotingAction::<_, vft_manager::io::AddParticipant>::new(
            self.remoting.clone(),
            participant,
        )
    }
    fn add_transaction(
        &mut self,
        destination: ActorId,
        value: u128,
    ) -> impl Call<Output = U256, Args = R::Args> {
        RemotingAction::<_, vft_manager::io::AddTransaction>::new(
            self.remoting.clone(),
            (destination, value),
        )
    }
    fn add_vara(&mut self) -> impl Call<Output = VftManagerEvents, Args = R::Args> {
        RemotingAction::<_, vft_manager::io::AddVara>::new(self.remoting.clone(), ())
    }
    fn distribution(&mut self, manual: bool) -> impl Call<Output = (), Args = R::Args> {
        RemotingAction::<_, vft_manager::io::Distribution>::new(self.remoting.clone(), manual)
    }
    fn rewards_claimed(
        &mut self,
        address: ActorId,
    ) -> impl Call<Output = VftManagerEvents, Args = R::Args> {
        RemotingAction::<_, vft_manager::io::RewardsClaimed>::new(self.remoting.clone(), address)
    }
    fn set_manual_mode(&mut self, manual: bool) -> impl Call<Output = (), Args = R::Args> {
        RemotingAction::<_, vft_manager::io::SetManualMode>::new(self.remoting.clone(), manual)
    }
    fn set_vft_contract_id(
        &mut self,
        vft_contract_id: ActorId,
    ) -> impl Call<Output = VftManagerEvents, Args = R::Args> {
        RemotingAction::<_, vft_manager::io::SetVftContractId>::new(
            self.remoting.clone(),
            vft_contract_id,
        )
    }
    fn pending_rewards(
        &self,
        address: ActorId,
    ) -> impl Query<Output = VftManagerQueryEvents, Args = R::Args> {
        RemotingAction::<_, vft_manager::io::PendingRewards>::new(self.remoting.clone(), address)
    }
    fn pool_details(&self) -> impl Query<Output = VftManagerQueryEvents, Args = R::Args> {
        RemotingAction::<_, vft_manager::io::PoolDetails>::new(self.remoting.clone(), ())
    }
    /// ## Returns the total number of tokens in the contract (In U256 format)
    /// Additionally, it returns all transactions with their execution status.
    fn rewards(&self) -> impl Query<Output = VftManagerQueryEvents, Args = R::Args> {
        RemotingAction::<_, vft_manager::io::Rewards>::new(self.remoting.clone(), ())
    }
}

pub mod vft_manager {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct AddAdmin(());

        impl AddAdmin {
            #[allow(dead_code)]
            pub fn encode_call(new_admin_address: ActorId) -> Vec<u8> {
                <AddAdmin as ActionIo>::encode_call(&new_admin_address)
            }
        }

        impl ActionIo for AddAdmin {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 32, 65, 100, 100, 65, 100, 109,
                105, 110,
            ];
            type Params = ActorId;
            type Reply = super::VftManagerEvents;
        }
        pub struct AddParticipant(());

        impl AddParticipant {
            #[allow(dead_code)]
            pub fn encode_call(participant: ActorId) -> Vec<u8> {
                <AddParticipant as ActionIo>::encode_call(&participant)
            }
        }

        impl ActionIo for AddParticipant {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 56, 65, 100, 100, 80, 97, 114,
                116, 105, 99, 105, 112, 97, 110, 116,
            ];
            type Params = ActorId;
            type Reply = super::VftManagerEvents;
        }
        pub struct AddTransaction(());

        impl AddTransaction {
            #[allow(dead_code)]
            pub fn encode_call(destination: ActorId, value: u128) -> Vec<u8> {
                <AddTransaction as ActionIo>::encode_call(&(destination, value))
            }
        }

        impl ActionIo for AddTransaction {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 56, 65, 100, 100, 84, 114, 97,
                110, 115, 97, 99, 116, 105, 111, 110,
            ];
            type Params = (ActorId, u128);
            type Reply = U256;
        }
        pub struct AddVara(());

        impl AddVara {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <AddVara as ActionIo>::encode_call(&())
            }
        }

        impl ActionIo for AddVara {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 28, 65, 100, 100, 86, 97, 114, 97,
            ];
            type Params = ();
            type Reply = super::VftManagerEvents;
        }
        pub struct Distribution(());

        impl Distribution {
            #[allow(dead_code)]
            pub fn encode_call(manual: bool) -> Vec<u8> {
                <Distribution as ActionIo>::encode_call(&manual)
            }
        }

        impl ActionIo for Distribution {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 48, 68, 105, 115, 116, 114, 105,
                98, 117, 116, 105, 111, 110,
            ];
            type Params = bool;
            type Reply = ();
        }
        pub struct RewardsClaimed(());

        impl RewardsClaimed {
            #[allow(dead_code)]
            pub fn encode_call(address: ActorId) -> Vec<u8> {
                <RewardsClaimed as ActionIo>::encode_call(&address)
            }
        }

        impl ActionIo for RewardsClaimed {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 56, 82, 101, 119, 97, 114, 100,
                115, 67, 108, 97, 105, 109, 101, 100,
            ];
            type Params = ActorId;
            type Reply = super::VftManagerEvents;
        }
        pub struct SetManualMode(());

        impl SetManualMode {
            #[allow(dead_code)]
            pub fn encode_call(manual: bool) -> Vec<u8> {
                <SetManualMode as ActionIo>::encode_call(&manual)
            }
        }

        impl ActionIo for SetManualMode {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 52, 83, 101, 116, 77, 97, 110,
                117, 97, 108, 77, 111, 100, 101,
            ];
            type Params = bool;
            type Reply = ();
        }
        pub struct SetVftContractId(());

        impl SetVftContractId {
            #[allow(dead_code)]
            pub fn encode_call(vft_contract_id: ActorId) -> Vec<u8> {
                <SetVftContractId as ActionIo>::encode_call(&vft_contract_id)
            }
        }

        impl ActionIo for SetVftContractId {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 64, 83, 101, 116, 86, 102, 116,
                67, 111, 110, 116, 114, 97, 99, 116, 73, 100,
            ];
            type Params = ActorId;
            type Reply = super::VftManagerEvents;
        }
        pub struct PendingRewards(());

        impl PendingRewards {
            #[allow(dead_code)]
            pub fn encode_call(address: ActorId) -> Vec<u8> {
                <PendingRewards as ActionIo>::encode_call(&address)
            }
        }

        impl ActionIo for PendingRewards {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 56, 80, 101, 110, 100, 105, 110,
                103, 82, 101, 119, 97, 114, 100, 115,
            ];
            type Params = ActorId;
            type Reply = super::VftManagerQueryEvents;
        }
        pub struct PoolDetails(());

        impl PoolDetails {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <PoolDetails as ActionIo>::encode_call(&())
            }
        }

        impl ActionIo for PoolDetails {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 44, 80, 111, 111, 108, 68, 101,
                116, 97, 105, 108, 115,
            ];
            type Params = ();
            type Reply = super::VftManagerQueryEvents;
        }
        pub struct Rewards(());

        impl Rewards {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <Rewards as ActionIo>::encode_call(&())
            }
        }

        impl ActionIo for Rewards {
            const ROUTE: &'static [u8] = &[
                40, 86, 102, 116, 77, 97, 110, 97, 103, 101, 114, 28, 82, 101, 119, 97, 114, 100,
                115,
            ];
            type Params = ();
            type Reply = super::VftManagerQueryEvents;
        }
    }
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum VftManagerEvents {
    NewAdminAdded(ActorId),
    NewParticipant(ActorId),
    AddVara,
    RefundOfVaras(u128),
    VFTContractIdSet,
    MinTokensToAddSet,
    MaxTokensToBurnSet,
    TokensAdded,
    TokensBurned,
    SetTokensPerVaras,
    TotalSwapInVaras(u128),
    TokensSwapSuccessfully {
        total_tokens: u128,
        total_varas: u128,
    },
    RewardsClaimed {
        total_rewards: u128,
    },
    Error(VftManagerErrors),
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum VftManagerErrors {
    MinTokensToAdd(u128),
    NoPendingRewards,
    FailedToSendRewards,
    MaxTokensToBurn(u128),
    InsufficientTokens {
        total_contract_suply: u128,
        tokens_to_burn: u128,
    },
    CantSwapTokens {
        tokens_in_vft_contract: U256,
    },
    CantSwapUserTokens {
        user_tokens: U256,
        tokens_to_swap: U256,
    },
    ContractCantMint,
    CantSwapTokensWithAmount {
        min_amount: u128,
        actual_amount: u128,
    },
    OnlyAdminsCanDoThatAction,
    VftContractIdNotSet,
    ErrorInVFTContract,
    ErrorInGetNumOfVarasToSwap,
    OperationWasNotPerformed,
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum VftManagerQueryEvents {
    ContractBalanceInVaras(u128),
    PoolDetails {
        admins: Vec<ActorId>,
        name: String,
        type_pool: String,
        distribution_mode: String,
        access_type: String,
        participants: Vec<ActorId>,
        vft_contract_id: Option<ActorId>,
        transaction_count: U256,
        transactions: Vec<(U256, Transaction)>,
        last_distribution_time: u64,
        is_manual: bool,
    },
    PendingRewards {
        address: ActorId,
        total_rewards: u128,
        transactions: Vec<Transaction>,
    },
    Rewards(Vec<(U256, Transaction, bool)>),
    UserTotalTokensAsU128(u128),
    UserTotalTokens(U256),
    TotalTokensToSwap(U256),
    TotalTokensToSwapAsU128(u128),
    TokensToSwapOneVara(u128),
    NumOfTokensForOneVara(u128),
    Error(VftManagerErrors),
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct Transaction {
    pub destination: ActorId,
    pub value: u128,
    pub executed: bool,
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait PoolFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
        fn new_with_data(
            &self,
            name: String,
            type_pool: String,
            distribution_mode: String,
            access_type: String,
            participants: Vec<ActorId>,
            vft_contract_id: Option<ActorId>,
            admins: Vec<ActorId>,
            last_distribution_time: u64,
            is_manual: bool,
        ) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait VftManager {
        type Args;
        fn add_admin(
            &mut self,
            new_admin_address: ActorId,
        ) -> impl Call<Output = VftManagerEvents, Args = Self::Args>;
        fn add_participant(
            &mut self,
            participant: ActorId,
        ) -> impl Call<Output = VftManagerEvents, Args = Self::Args>;
        fn add_transaction(
            &mut self,
            destination: ActorId,
            value: u128,
        ) -> impl Call<Output = U256, Args = Self::Args>;
        fn add_vara(&mut self) -> impl Call<Output = VftManagerEvents, Args = Self::Args>;
        fn distribution(&mut self, manual: bool) -> impl Call<Output = (), Args = Self::Args>;
        fn rewards_claimed(
            &mut self,
            address: ActorId,
        ) -> impl Call<Output = VftManagerEvents, Args = Self::Args>;
        fn set_manual_mode(&mut self, manual: bool) -> impl Call<Output = (), Args = Self::Args>;
        fn set_vft_contract_id(
            &mut self,
            vft_contract_id: ActorId,
        ) -> impl Call<Output = VftManagerEvents, Args = Self::Args>;
        fn pending_rewards(
            &self,
            address: ActorId,
        ) -> impl Query<Output = VftManagerQueryEvents, Args = Self::Args>;
        fn pool_details(&self) -> impl Query<Output = VftManagerQueryEvents, Args = Self::Args>;
        fn rewards(&self) -> impl Query<Output = VftManagerQueryEvents, Args = Self::Args>;
    }
}
